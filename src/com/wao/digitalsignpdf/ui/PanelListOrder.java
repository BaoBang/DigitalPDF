/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wao.digitalsignpdf.ui;

import com.wao.digitalsignpdf.api.response.Result;
import com.wao.digitalsignpdf.api.requestbody.GetFileBody;
import com.wao.digitalsignpdf.api.response.Bill;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 *
 * @author BaoBang
 */
public class PanelListOrder extends javax.swing.JPanel {

    List<Bill> orders;
    private final FrameMain frame;
    private final ActionListener nextActionListener;
    private final ActionListener previousActionListener;

    /**
     * Creates new form PanelListOrder
     *
     * @param frame
     */
    public PanelListOrder(FrameMain frame) {
        initComponents();
        this.frame = frame;
        orders = new ArrayList<>();

        java.awt.EventQueue.invokeLater(() -> {
            frame.showLoading("Tải danh sách file");
        });
        frame.getAPIService().getBills(new GetFileBody(frame.getId())).enqueue(new Callback<Result<List<String>>>() {
            @Override
            public void onResponse(Call<Result<List<String>>> call, Response<Result<List<String>>> response) {
                java.awt.EventQueue.invokeLater(() -> {
                    frame.hideLoading();
                });
                if (response.isSuccessful()) {
                    Result<List<String>> result = response.body();

                    if (result.getResult().getErrorCode() == 0) {
                        updateDataList(frame.getId(), result.getResult().getData());
                    } else {
                        JOptionPane.showMessageDialog(frame, result.getResult().getErrorDescription());
                    }
                } else {
                    JOptionPane.showMessageDialog(frame, response.message());
                }
            }

            @Override
            public void onFailure(Call<Result<List<String>>> call, Throwable t) {
                java.awt.EventQueue.invokeLater(() -> {
                    frame.hideLoading();
                });
                frame.hideLoading();
                JOptionPane.showMessageDialog(frame, t.getMessage());
            }

        });
        previousActionListener = (e) -> {
            doClickPrevious();
        };

        nextActionListener = (e) -> {
            doClickNext();
        };
    }

    private void updateDataList(String Id, List<String> data) {
        DefaultListModel<Bill> model = new DefaultListModel<>();
        orders = getBill(Id, data);
        orders.forEach((Bill b) -> {
            model.addElement(b);
        });
        listOrderAvaliable.setModel(model);
        listOrderSelected.setModel(new DefaultListModel<>());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listOrderAvaliable = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOrderSelected = new javax.swing.JList<>();
        btnSelectedMode = new javax.swing.JButton();
        btnAllSelectedMode = new javax.swing.JButton();
        btnRemoveSelectedMode = new javax.swing.JButton();
        btnRemoveAllSelectedMode = new javax.swing.JButton();

        listOrderAvaliable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách hóa đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jScrollPane1.setViewportView(listOrderAvaliable);

        listOrderSelected.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hóa đơn được chọn kí", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jScrollPane2.setViewportView(listOrderSelected);

        btnSelectedMode.setText(">");
        btnSelectedMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectedModeActionPerformed(evt);
            }
        });

        btnAllSelectedMode.setText(">>");
        btnAllSelectedMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllSelectedModeActionPerformed(evt);
            }
        });

        btnRemoveSelectedMode.setText("<");
        btnRemoveSelectedMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSelectedModeActionPerformed(evt);
            }
        });

        btnRemoveAllSelectedMode.setText("<<");
        btnRemoveAllSelectedMode.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                onPanelAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        btnRemoveAllSelectedMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllSelectedModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSelectedMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAllSelectedMode, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(btnRemoveSelectedMode)
                    .addComponent(btnRemoveAllSelectedMode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAllSelectedMode, btnRemoveAllSelectedMode, btnRemoveSelectedMode, btnSelectedMode});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnSelectedMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAllSelectedMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveSelectedMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveAllSelectedMode)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAllSelectedMode, btnSelectedMode});

    }// </editor-fold>//GEN-END:initComponents

    private void btnAllSelectedModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllSelectedModeActionPerformed
        // TODO add your handling code here:
        DefaultListModel<Bill> model = new DefaultListModel<>();
        ListModel<Bill> orderAvaliableModel = listOrderAvaliable.getModel();
        for (int i = 0; i < orderAvaliableModel.getSize(); i++) {
            model.addElement(orderAvaliableModel.getElementAt(i));
        }
        listOrderSelected.setModel(model);
    }//GEN-LAST:event_btnAllSelectedModeActionPerformed

    /**
     * phương thức được gọi khi người dùng click vào button ">" add những item
     * được chọn từ dánh sách avaliable sang danh sách selected
     *
     */

    private void btnSelectedModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectedModeActionPerformed
        // TODO add your handling code here:
        DefaultListModel<Bill> orderAvaliableModel = (DefaultListModel<Bill>) listOrderAvaliable.getModel();
        DefaultListModel<Bill> orderSelectedModel = (DefaultListModel<Bill>) listOrderSelected.getModel();
        int selectedIndeis[] = listOrderAvaliable.getSelectedIndices();
        if (selectedIndeis.length > 0) {
            for (Integer i : selectedIndeis) {
                if (!checkExits(orderAvaliableModel.getElementAt(i), orderSelectedModel)) {
                    orderSelectedModel.addElement(orderAvaliableModel.getElementAt(i));
                }
            }
        }
    }//GEN-LAST:event_btnSelectedModeActionPerformed
    /**
     * phương thức được gọi khi người dùng click vào button "<" remove những
     * item được chọn ra khỏi danh sách selected
     */

    private void btnRemoveSelectedModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSelectedModeActionPerformed
        // TODO add your handling code here:
        DefaultListModel<Bill> orderSelectedModel = (DefaultListModel<Bill>) listOrderSelected.getModel();
        int selectedIndeis[] = listOrderSelected.getSelectedIndices();
        for (int i = selectedIndeis.length - 1; i >= 0; i--) {
            orderSelectedModel.remove(selectedIndeis[i]);
        }
    }//GEN-LAST:event_btnRemoveSelectedModeActionPerformed

    /**
     * phương thức được gọi khi người dùng click vào button "<<" remove tất cả
     * những item ra khỏi danh sách selected
     */
    private void btnRemoveAllSelectedModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllSelectedModeActionPerformed
        // TODO add your handling code here:
        DefaultListModel<Bill> orderSelectedModel = (DefaultListModel<Bill>) listOrderSelected.getModel();
        orderSelectedModel.clear();
    }//GEN-LAST:event_btnRemoveAllSelectedModeActionPerformed

    /**
     * Phương thức được gọi khi Panel được add vào panel chính
     */

    private void onPanelAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_onPanelAdded
        // TODO add your handling code here:

        frame.setTextButtonNext("Tiếp theo");
        frame.setPreviousButton(previousActionListener, false);
        frame.setNextButton(nextActionListener, true);
    }//GEN-LAST:event_onPanelAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllSelectedMode;
    private javax.swing.JButton btnRemoveAllSelectedMode;
    private javax.swing.JButton btnRemoveSelectedMode;
    private javax.swing.JButton btnSelectedMode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Bill> listOrderAvaliable;
    private javax.swing.JList<Bill> listOrderSelected;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * Phương thức đươc gọi khi click button ">" chọn file để kí
     * Phương thức kiểm tra file đã tồn tại ở danh sách file được chọn chưa
     * @param elementAt 
     *      File được chọn
     * @param  orderSelectedModel 
     *      Danh sách files đã chọn
     * @return 
     *      true    file đã được chọn
     *      false   file chưa chọn
     */
    private boolean checkExits(Bill elementAt, DefaultListModel<Bill> orderSelectedModel) {
        for (int i = 0; i < orderSelectedModel.getSize(); i++) {
            if (orderSelectedModel.getElementAt(i).getId().equals(elementAt.getId())) {
                return true;
            }
        }
        return false;
    }

    private void doClickPrevious() {
        frame.removeListener(previousActionListener, nextActionListener);
        frame.previousStep();
        frame.attachPanel();
    }

    private void doClickNext() {
        DefaultListModel<Bill> model = (DefaultListModel<Bill>) listOrderSelected.getModel();
        if (model.getSize() == 0) {
            JOptionPane.showMessageDialog(frame, "Vui lòng chọn hóa đơn cần kí");
            return;
        }
        frame.removeListener(previousActionListener, nextActionListener);
        frame.nextStep();
        frame.attachPanel();
    }

    /**
     *
     * 
     * 
     * @return 
     */
    public List<Bill> getOrderSelected() {
        List<Bill> files = new ArrayList<>();

        DefaultListModel<Bill> model = (DefaultListModel<Bill>) listOrderSelected.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            files.add(model.get(i));
        }
        return files;
    }

    private List<Bill> getBill(String Id, List<String> data) {
        List<Bill> bills = new ArrayList<>();
        String items[] = Id.split(",");
        if (items.length == data.size()) {
            for (int i = 0; i < items.length; i++) {
                Bill bill = new Bill(items[i], data.get(i));
                bills.add(bill);
            }
        }
        return bills;
    }

}
