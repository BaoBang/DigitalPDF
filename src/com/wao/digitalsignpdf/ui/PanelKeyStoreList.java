package com.wao.digitalsignpdf.ui;

import com.wao.digitalsignpdf.callback.UploadFileCallBack;
import com.wao.digitalsignpdf.errorexception.CanNotGetKeyStoreException;
import com.wao.digitalsignpdf.errorexception.SignFailedException;
import com.wao.digitalsignpdf.errorexception.URLInvalidException;
import com.wao.digitalsignpdf.CreateSignature;
import com.wao.digitalsignpdf.api.response.Bill;
import com.wao.digitalsignpdf.api.response.Data;
import com.wao.digitalsignpdf.api.response.FileResponse;
import com.wao.digitalsignpdf.utils.MessageConstant;
import com.wao.digitalsignpdf.utils.UploadFile;
import com.wao.digitalsignpdf.utils.Utils;
import java.awt.event.ActionListener;
import java.io.File;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author BaoBang
 */
public class PanelKeyStoreList extends javax.swing.JPanel {

    private List<String> aliases;
    private final FrameMain frame;

    private final ActionListener nextActionListener;
    private final ActionListener previousActionListener;

    private int oldFileSize = 0;

    private int totalOrders = 0;
    private int countOrders = 1;
    String error = "";

    /**
     * Creates new form PanelKeyStoreList
     *
     * @param frame
     */
    public PanelKeyStoreList(FrameMain frame){
        initComponents();
        this.frame = frame;

        previousActionListener = (e) -> {
            doClickPrevious();
        };
        nextActionListener = (e) -> {
            doClickNext();
        };
        waitForNotifying();

    }

    /**
     *
     * Thread kiểm tra có usb được cắm hay rút ra Cập nhật lại danh sách alias
     * nếu có sự kiện trên.
     *
     */
    private void waitForNotifying() {
        Thread t = new Thread(() -> {
            while (true) {
                if (File.listRoots().length - oldFileSize != 0) {
                    oldFileSize = File.listRoots().length;
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                    }
                    try {
                        getAliases();
                    } catch (CanNotGetKeyStoreException ex) {
                        Logger.getLogger(PanelKeyStoreList.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listKeyStores = new javax.swing.JList<>();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                onPanleAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        listKeyStores.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Chọn chữ kí số", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        listKeyStores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listKeyStores);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Phương thức được gọi khi panel này được add vào một component khác.
     */

    private void onPanleAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_onPanleAdded

        frame.setTextButtonNext("Bắt đầu kí");
        frame.setNextButton(nextActionListener, true);
        frame.setPreviousButton(previousActionListener, true);
        try {
            // TODO add your handling code here:
            getAliases();
        } catch (CanNotGetKeyStoreException ex) {
            JOptionPane.showConfirmDialog(frame, ex.getMessage(), MessageConstant.ERROR_TITLE, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_onPanleAdded

    /**
     * Phương thức được gọi khi người dùng click vào button previous Remove
     * listener của button next và button previous
     */
    private void doClickPrevious() {
        frame.removeListener(previousActionListener, nextActionListener);
        frame.previousStep();
        frame.attachPanel();
    }

    /**
     * phương thức được gọi khi người dùng click vào button next Kiểm tra hợp lệ
     * input Thực hiện sign pdf
     */
    private void doClickNext() {
        if (listKeyStores.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frame, MessageConstant.NONE_CHOOSE_KEYSTORE_MESSAGE, MessageConstant.WARNING_TITLE, JOptionPane.WARNING_MESSAGE);
            return;
        }
        java.awt.EventQueue.invokeLater(() -> {
            frame.showLoading(MessageConstant.SIGNING_FILE_MESSAGE);
        });

        Thread thread = new Thread(() -> {
            String alias = aliases.get(listKeyStores.getSelectedIndex());
            List<Bill> orders = frame.getPanelListOrder().getOrderSelected();
            totalOrders = orders.size();
            countOrders = 0;
            error = "";
            List<File> files = new ArrayList<>();
            try {
                KeyStore keystore = Utils.getKeyStore();
                for (Bill b : orders) {
                    // sign PDF
                    CreateSignature signing = new CreateSignature(keystore, alias, "".toCharArray());
                    signing.setExternalSigning(true);
                    File inFile = Utils.getFileFromURL(b.getLink());
                    files.add(inFile);

                    String name = inFile.getName();
                    String substring = name.substring(0, name.lastIndexOf('.'));
                    File outFile = new File(inFile.getParent(), substring + "_signed.pdf");
                    files.add(outFile);

                    signing.signDetached(inFile, outFile, null);

                    UploadFile file = new UploadFile(frame.getAPIService(), outFile, new UploadFileCallBack() {
                        @Override
                        public void onSuccess(Data<FileResponse> data) {
                            increaseOrderUploaded();
                            checkUploadedSuccess(files);
                        }

                        @Override
                        public void onFailed(String message) {
                            error = error + message + "\r\n";
                            increaseOrderUploaded();
                            checkUploadedSuccess(files);
                        }
                    });
                    file.start();
                }

            } catch (CanNotGetKeyStoreException | SignFailedException | URLInvalidException ex) {
                frame.hideLoading();
                JOptionPane.showMessageDialog(frame, ex.getMessage(), MessageConstant.ERROR_TITLE, JOptionPane.ERROR_MESSAGE);
                for (int i = files.size() - 1; i >= 0; i--) {
                    files.get(i).delete();
                    files.remove(i);
                }
            } finally {
                frame.hideLoading();
            }
        });
        thread.start();
    }

    public void increaseOrderUploaded() {
        countOrders++;
    }

    public void checkUploadedSuccess(List<File> files) {
        if (countOrders == totalOrders) {
            java.awt.EventQueue.invokeLater(() -> {
                frame.hideLoading();
            });
            if (error.equals("")) {
                JOptionPane.showMessageDialog(frame, MessageConstant.SIGNING_SUCCESS_MESSAGE, MessageConstant.MESSAGE_TITLE, JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(frame, error, MessageConstant.ERROR_TITLE, JOptionPane.ERROR_MESSAGE);
            }

            for (int i = files.size() - 1; i >= 0; i--) {
                files.get(i).delete();
                files.remove(i);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listKeyStores;
    // End of variables declaration//GEN-END:variables

    private void getAliases() throws CanNotGetKeyStoreException {
        aliases = Utils.getKeystores();
        DefaultListModel<String> model = new DefaultListModel<>();
        model.clear();
        for (String alias : aliases) {
            model.addElement(alias);
        }
        listKeyStores.setModel(model);
    }

}
